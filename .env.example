# When adding additional environment variables, the schema in "/src/env.js"
# should be updated accordingly.

#********* REQUIRED ENV VARS *********

# These variables are also used by docker compose in compose.yml to name the container
# and initialise postgres with default username, password. Use your own values when deploying to production.
POSTGRES_CONTAINER_NAME="splitpro-db"
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="strong-password"
POSTGRES_DB="splitpro"
POSTGRES_PORT=5432
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_CONTAINER_NAME}:${POSTGRES_PORT}/${POSTGRES_DB}"

# Next Auth
# You should generate a new secret on the command line with:
# openssl rand -base64 32
# https://next-auth.js.org/configuration/options#secret
NEXTAUTH_SECRET="secret"
NEXTAUTH_URL="http://localhost:3000"

# The default /home page is a blog page that may not be suitable for your use case.
# You can change it to /balances or any other URL you want.
# Note that it creates a permanent redirect, so changing it later will require a cache clear from users.
DEFAULT_HOMEPAGE="/home"

# If provided, server-side calls will use this instead of NEXTAUTH_URL.
# Useful in environments when the server doesn't have access to the canonical URL
# of your site.
# NEXTAUTH_URL_INTERNAL="http://localhost:3000"


# Enable sending invites
ENABLE_SENDING_INVITES=false

# Disable email signup (magic link/OTP login) for new users
DISABLE_EMAIL_SIGNUP=false
#********* END OF REQUIRED ENV VARS *********


#********* OPTIONAL ENV VARS *********
# SMTP options
FROM_EMAIL=
EMAIL_SERVER_HOST=
EMAIL_SERVER_PORT=
EMAIL_SERVER_USER=
EMAIL_SERVER_PASSWORD=

# Google Provider : https://next-auth.js.org/providers/google
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# Authentic Providder : https://next-auth.js.org/providers/authentik
# Issuer: should include the slug without a trailing slash â€“ e.g., https://my-authentik-domain.com/application/o/splitpro
AUTHENTIK_ID=
AUTHENTIK_SECRET=
AUTHENTIK_ISSUER=

# OIDC Provider 
# The (lowercase) name will be used to generate an id and possibly display an icon if it is added in https://github.com/oss-apps/split-pro/blob/main/src/pages/auth/signin.tsx#L25
# If your provider is not added, simpleicon probably has it and you may submit a PR
OIDC_NAME=
OIDC_CLIENT_ID=
OIDC_CLIENT_SECRET=

# An OIDC Well-Known URI registry: https://openid.net/specs/openid-connect-discovery-1_0.html#WellKnownRegistry
# For example, https://example.com/.well-known/openid-configuration
OIDC_WELL_KNOWN_URL=

# Required for some providers to link with existing accounts, make sure you trust your provider to properly verify email addresses
# OIDC_ALLOW_DANGEROUS_EMAIL_LINKING=1

# Storage: any S3 compatible storage will work, for self hosting can use minio
# If you're using minio for dev, you can generate access keys from the console http://localhost:9001/access-keys/new-account
# R2_ACCESS_KEY="access-key"
# R2_SECRET_KEY="secret-key"
# R2_BUCKET="splitpro"
# R2_URL="http://localhost:9002"
# R2_PUBLIC_URL="http://localhost:9002/splitpro"

# Push notification, Web Push: https://www.npmjs.com/package/web-push
# generate web push keys using this command: npx web-push generate-vapid-keys --json
# or use the online tool: https://vapidkeys.com/
WEB_PUSH_PRIVATE_KEY=
WEB_PUSH_PUBLIC_KEY=
WEB_PUSH_EMAIL=

# Email options
FEEDBACK_EMAIL=

# Discord webhook for error notifications
DISCORD_WEBHOOK_URL=

# Open Exchange Rates App ID
OPEN_EXCHANGE_RATES_APP_ID=
#********* END OF OPTIONAL ENV VARS *********
